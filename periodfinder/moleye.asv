function molEye = moleye(A,B,tShift,signalDuration,bitSeqStr,plotFolder)

%GMCommented:countBStr = int2str(B);
%GMCommented:countAStr = int2str(A);
%GMCommented:signal_duration = duration;
%GMCommented:tSignalStr = num2str(duration);
%GMCommented:signal_shift_bw_A_B = shift;
%GMCommented:shiftStr = int2str(shift);

bit_sequence = transpose(num2str(bitSeqStr) - '0');

%GMCommented: bit_sequence = [0;0;1;0;1;1;1;1;0;0;1;0;1];
%GMCommented:bitSeqStr = "0010111100101";

dirName= getName(A, B, signalDuration, tShift, bitSeqStr)
matFileName = strcat(dirName,".mat")
      
%dirName = strcat("A",countAStr,"_B", countBStr ,"_K_TS",tSignalStr, "_Seq", bitSeqStr, "_TShift", shiftStr);
%matFileName = strcat("A",countAStr,"_B", countBStr,"_K_TS",tSignalStr, "_Seq", bitSeqStr, "_TShift", shiftStr, ".mat");
            
% reads the file from plotData and plots the whole signal. 
%I am not sure if this is the true density data we should use in moleye
%but it looks like it so i used this data.
%GMCommented: folder = '/home/neval/Desktop/492/preqReceiver/plotData';  % You specify this!
fullMatFileName = fullfile(plotFolder,  matFileName);
if ~exist(fullMatFileName, 'file')
  message=sprintf('%s does not exist', fullMatFileName)
  error(message);
else
  s = load(fullMatFileName);
end
%here i am reading from the data array. there are 4 rows of data in the
%struct. i plotted them all to see what are those values. if you also want
%to see what is the data i am reading from the file please activate the
%commented code below. I thought data1 is our density data because it
%looks like it. 
%data1 is plotted in figure 1.
dataB = s.signalData(:,7);
dataA = s.signalData(:,8); %TODO: Isn't this molecule B
time = s.t; %there is also a time variable in s. click on s in workspace to see

%% here i am cutting the data1 into pieces and putting them in a matrix to 
%%visualize moleye. Eg: for 7 bits, there will be 7 pieces.
count1 = 0; % # (number of) ones in the bit sequence
count0 = 0; % # zeros in the bit sequence

for i = 1:length(bit_sequence)
    if (bit_sequence(i) == 1) 
        count1 = count1 + 1;
    else
        count0 = count0 + 1;
    end             
end

period = length(dataA)/length(bit_sequence); % i redefined period because the data in data1 is sampled
oneArray = zeros(period,count1);
zeroArray = zeros(period,count0);

j = 1;
k = 1;
figure('Name', "moleyeContinious"+matFileName)
set(gcf, 'Position',  [100, 100, 1200, 400])
xlabel("time(s)");
grid on;
ylabel("concentration(nmol)");

hold on
for i = 1:length(bit_sequence)   
   if(i == 1)
       plot(((i-1)*period)+1:i*period, dataA(((i-1)*period)+1:i*period) , "b",'LineWidth',2); 
   elseif (bit_sequence(i) == 1)        
       plot(((i-1)*period):i*period, dataA(((i-1)*period):i*period) , "b",'LineWidth',2);       
   else        
       plot(((i-1)*period):i*period, dataA(((i-1)*period):i*period) , "r",'LineWidth',2);       
   end   
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for i = 1:length(bit_sequence)
    current = dataA(((i-1)*period)+1:i*period);
    if (bit_sequence(i) == 1) 
        oneArray(:,j) = current;        
        j = j + 1;
    else
        zeroArray(:,k) = current;       
        k = k + 1;
    end             
end
%this is the part that plots ones and zeros on the same plot 
%blue lines are ones and the red lines are zeros in figure 2.


figure('Name', "moleye"+matFileName);
set(gcf, 'Position',  [100, 100, 400, 400])
xlabel("time(s)");
grid on;
ylabel("concentration(nmol)");

hold on
plot(1:period, oneArray , "b",'LineWidth',1);
plot(1:period, zeroArray , "r",'LineWidth',1);

%% score calculation
%here i am taking the mininum of ones and maximum of zeros and putting them
%in a seperate array, then taking the difference for each data point and
%summing this difference up. basicly calculating the area between the
%lowest one and highest 0.
%the bigger this score gets the better the signal quality is.
%also i plotted the minimum of ones and maximum of zeros in figure 3.
minOne = min(oneArray,[],2);
maxZero = max(zeroArray,[],2);

figure('Name', "moleye3"+matFileName);

set(gcf, 'Position',  [100, 100, 400, 400])
xlabel("time(s)");
grid on;
ylabel("concentration(nmol)");
hold on
plot(1:period,minOne(:,1), "b",'LineWidth',2);
plot(1:period,maxZero(:,1), "r",'LineWidth',2);

error('stop')

difference = minOne - maxZero;
%please note that if the difference between minimum of ones and maximum of
%zeros are below zero, i dont sum that value up. then i multiplied with the
%deltaT, difference of seconds between 2 samples.
for i = 1:period
    if (difference(i) < 0) 
        difference(i) = 0;
    end
end
deltaT = time(2)-time(1);
score = sum(difference)*deltaT;
disp('Log - moleye - file: ' + matFileName + "deltaT:" + sprintf("%.0f,",deltaT) + "difference:" + sprintf("%.0f,",deltaT))
           
molEye = score;



    